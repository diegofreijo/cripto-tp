Protocolo para "Mental Truco"

Se define un procotolo que permite el reparto de cartas previo a una mano de truco y la posterior utilizaci'on de las mismas durante la mano. El dise'no del protocolo se hizo con los objetivos de garantizar la transparencia del juego, tanto en el reparto de las cartas como durante el desarrollo del juego.
El protocolo brinda cierta seguridad de que las cartas han sido repartidas azarosamente, y permite verificar que cada jugador haya recibido las cartas que decide jugar.
Durante la especificai'on del protocolo, se usar'a A para referirse al servidor, y B para referirse al cliente.

Reparto
=======

1. B le pide conexi'on a A

------------
|  "INIT"  |
------------
4 bytes

2. A genera una clave sim'etrica k (por ejemplo, con AES), encripta las 40 cartas M1...M40 con k y las env'ia a B (k sirve para asegurar que el mazo enviado por A en este paso es v'alido).


------------------------------------------------
|   k(M1)   |   k(M2)   |   ...   |   k(M40)   |
------------------------------------------------
  160 bits    160 bits               160 bits


3. B genera un primo grande p y genera e1b, d1b (utilizadas para asegurar una repartici'on justa) y e2b, d2b (utilizadas para asegurar que se jueguen las cartas tocadas) tal que

  e1b * d1b = 1 [mod p-1] = e2b * d2b

B env'ia a A el p y las cartas ya encriptadas con k encriptadas a su vez con e1b (usando RSA)

  e1b(k(Mi)) = k(Mi)^e1b


-----------------------------------------------------------------------
|   p   |   e1b(k(M1))   |   e1b(k(M2))   |   ...   |   e1b(k(M40))   |
-----------------------------------------------------------------------
  1024 b     1024 b           1024 b         1024 b       1024 b


4. A usa p para generarse sus propias claves e1a, d1a y e2a, d2a

  e1a * d1a = 1 [mod p-1] = e2a * d2a

A elige al azar 3 cartas de las enviadas por B (B1, B2, B3) y las firma con e2a. Luego env'ia cada carta como una tupla

  <e1b(k(Bi)),      e2a(e1b(k(Bi)))> =
  <k(Bi)^e1b [mod p],   k(Bi)^(e1b * e2a) [mod p]>

A su vez, repite el paso anterior realizado por B envi'andole el resto de las cartas (Ri) encriptadas con su clave:

  e1a(e1b(k(Ri))) = k(Ri)^(e1b * e1a) [mod p]


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   e1b(k(B1))   |   e1b(k(B2))   |   e1b(k(B3))   |   e2a(e1b(k(B1)))   |   e2a(e1b(k(B2)))   |   e2a(e1b(k(B3)))   |   e1a(e1b(k(R1)))   |   e1a(e1b(k(R2)))   |   ...   |   e1a(e1b(k(R37)))   |
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
     1024 b           1024 b           1024 b              1024 b                1024 b                1024 b                 1024 b                1024 b                         1024 b

5. B recibe sus cartas (las tuplas) y les aplica la desencripci'on de e1b con d1b:

  <d1b(k(Bi)^e1b [mod p]),    d1b(k(Bi)^(e1b * e2a) [mod p])> =
  <k(Bi)^(e1b * d1b) [mod p],   k(Bi)^(e1b * e2a * d1b) [mod p]> =
  <k(Bi),             k(Bi)^e2a [mod p]>

A su vez, elige 3 cartas al azar (A1, A2, A3) del resto (las Ri) y les aplica tambi'en d1b:

  d1b(k(Ai)^(e1b * e1a) [mod p]) =
  k(Ai)^(e1b * e1a * d1b) [mod p] =
  k(Ai)^e1a [mod p]

Para completar la mano de A, debe completar las tuplas con su firma:

  e2b(k(Ai)^e1a [mod p]) =
  k(Ai)^(e1a * e2b) [mod p]

y se las env'ia a A:

  <k(Ai)^e1a [mod p],     k(Ai)^(e1a * e2b) [mod p]>


----------------------------------------------------------------------------------------------------------------------
|   e1a(k(A1))   |   e1a(k(A2))   |   e1a(k(A3))   |   e2b(e1a(k(A1)))   |   e2b(e1a(k(A2)))   |   e2b(e1a(k(A3)))   |
----------------------------------------------------------------------------------------------------------------------
     1024 b           1024 b           1024 b              1024 b                1024 b                1024 b


6. A recibe sus cartas y les aplica la desencripci'on de e1a con d1a:

  <d1a(k(Ai)^e1a [mod p]),      d1a(k(Ai)^(e1a * e2b) [mod p])> =
  <k(Ai)^(e1a * d1a) [mod p],     k(Ai)^(e1a * e2b * d1a) [mod p]> =
  <k(Ai),               k(Ai)^e2b [mod p]>

A utiliza k para ver las cartas que le tocaron, su mano queda

  <Ai, k(Ai)^e2b [mod p]>

Por 'ultimo, env'ia k a B


---------
|   k   |
---------
  128 b



7. B recibe k, con lo que la utiliza para ver los Mi que le mand'o A en el paso 2 (pose'ia k(Mi)) y verificar que le mand'o un mazo v'alido. Tambi'en desencripta su mano para ver las cartas que le tocaron:

  <Bi, k(Bi)^e2a [mod p]>


----------------------------------------------

Pre-inicio del juego
====================

8. Ahora que ambos tienen sus manos, B se genera un par de claves RSA comunes y corrientes

  (e3b, nb), (d3b, nb)

y envia la publica (e3b, nb) a A. Usara d3b solo para firmar sus acciones.

A su vez, genera un paquete con el timestamp inicial decretando esta como la hora de inicio de juego. Lo envia firmado con d3b.


------------------------------------
|   e3b   |   nb   |   d3b(ts_i)   |
------------------------------------
  2048 b    2048 b      2048 b





9. A lee con la clave p'ublica de B lo firmado por el y verifica que el timestamp es v'alido. Se genera tambi'en sus pares de claves RSA

  (e3a, na), (d3a, na)

y env'ia su aceptaci'on (firmada con d3a) de la hora de inicio.


--------------------
|   e3a   |   na   |
--------------------
  2048 b    2048 b



10. Al recibir B la verificaci'on, puede empezar a jugar (notar que es mano).

----------------------------------------------

Transcurso del juego
====================

+ El que pidi'o conexio'on (cliente) es el jugador que es mano.

+ Supongo que B quiere jugar B2. Entonces debe enviar la firma que posee:

  k(B2)^e2a [mod p]

Cuando A lo recibe, le aplica su desencripci'on:

  d2a(k(B2)^e2a [mod p]) =
  k(B2)^(e2a * d2a) [mod p] =
  k(B2)

Y con aplicar k, obtiene B2.

+ Cada vez que se canta o se juega una carta, se debe adjuntar un timestamp del momento del canto/juego. Luego, el paquete debe ser firmado (con d3a/d3b seg'un corresponda) para evitar el repudio del emisor m'as adelante ("...no no, yo no te cant'e, entendiste mal...") y la reutilizaci'on del canto como prueba falsa mas adelanto ("...s'i s'i, vos cantaste truco; hace 5 horas, pero cantaste, mir'a...").

+ El que finalice el juego (el que se vaya al mazo, el que mate la u'ltima carta del contrincante, el que gane el falta envido) debe adem'as enviar un timestamp firmado, marc'andolo como el final oficial del juego. El oponente, aunque est'e caliente, debe confirmarle si la hora es v'alida.

----------------------------------------------

Diagrama de paquetes para el transcurso del juego
==================================================
Suponiendo que se env'ian los datos en limpio, el formato de paquete ser'ia

----------------------------------------------
|   ts   |   comando   |   carta(opcional)   |
----------------------------------------------
   32 b        4 b            1024 b


Timestamp / Nro de secuencia
----------------------------
N'umero de secuenciamiento de paquetes. Quien comienza el juego setea el valor inicial. Se debe respetar la correlatividad, sino se aborta la conexi'on.


Comandos
--------
00: QUIERO
01: JUEGO
02: ENVIDO
03: REAL ENVIDO
04: FALTA ENVIDO
05: TRUCO
06: QUIERO RETRUCO
07: QUIERO VALECUATRO



Cartas
------
Como texto plano, son representadas por un hash. Pero lo que se env'ia es la firma dada por el contrincante en el reparto

ej:     e2a(k(B2)) = k(B2)^e2a [mod p]

Utilizando primos de 1024 bits, podemos suponer que la firma no ocupar'a m'as que eso.


Firma del envio
---------------
El paquete formado ateriormente debe ser enviado firmado con d3a o d3b segun corresponda. Por lo tanto, el paquete enviado realmente sera


----------------------------------
|   d3b(paquete) / d3a(paquete)  |
----------------------------------
              2048 b



----------------------------------------------

Elecciones tomadas
==================

+ Todos los primos generados son de 1024 bits.
+ Las claves publicas y privadas son RSA.
+ Las claves simetricas son de 128 bits.
+ Las claves simetricas se utilizan con AES.
+ Las cartas son representadas como un hash de 160 bits.
+ Todos los hasheos son hechos con SHA1.

+ Al enviar encripciones o claves con claves de RSA, siempre se envian con longitud fija = len(n) =(capaz que aprox) 1024 o 2048 segun la clave. Si el valor a enviar tiene una longitud menor, se rellena con ceros a la izquierda.

----------------------------------------------

Notas
=====

1. Validez del protocolo:
  a. Durante el reparto, el mazo enviado por A podra ser verificado por B que es valido ya que lo puede observar al final de la reparto. Ademas, A no tiene posibilidad de alterar las cartas en el transcurso del protocolo porque desconoce que valores alterar (hasta el final todo dato que ve esta encriptado por lo menos con e1b).

  b. Las cartas con elegidas al azar porque la eleccion de estas por parte del contincante son cuando existe sobre ellas por lo menos una encripcion imposible de decifrar por parte del jugador. Si se alterasen estos datos, luego el oponente se daria cuenta ya que al desencriptar encontraria ruido y no una carta.

  c. Cada jugador recibe siempre, junto a la carta tocada, la firma por parte del contrincante que esa carta fue realmente elegida por este. Asi, el oponente puede estar seguro que el otro no esta jugando cartas que no le tocaron. Esto implica que, si me quiero ir al mazo luego de cantar envido y mostrar SOLO 2 cartas, puedo enviando SOLO las firmas correspondientes a esas cartas.

  d. Ambos jugadores tienen la posibilidad de demostrar todas las acciones realizadas por el oponente (cantos/jugadas de cartas) ya que guardan las firmas con timestamp. A su vez, si a un jugador le dicen que canto algo en cierta mano, este puede verificarlo corroborando los timestamps de inicio y fin de esa mano con el marcado en el paquete; y no puede ser alterado por nadie mas que el que genero la accion (el que firmo) ya que es el unico que posee la clave privada asociada a la firma.


2. Cantidad de claves:
  Hay muchas. Una simetrica, 2 pares RSA por jugador solo para el reparto y un par mas por cada uno para firmar las acciones. Pero estas ultimas pueden ser reutilizadas toda mano que se desee ya que nunca es necesario revelar la clave privada (d3a/d3b).


3. Seguridad mas fina (o mejor dicho, corroborar si es necesario analizar esto):
  a. En principio, el protocolo podria correr sobre SSL, pero no lo vamos a hacer si es que queremos entregar en este cuatrimestre... Por lo que se supone que nadie de afuera va a querer molestar a 2 pobres jugadores de "Mental Truco".
  b. Verificar si firmar varias acciones durante varias manos siempre con la misma clave (d3a/d3b) puede ser atacado de alguna forma.
  c. Verificar si utilizar un n = p puede ser inseguro en el reparto.
